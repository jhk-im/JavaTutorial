https://okky.kr/article/358197

// 모델링?
-> 3d 모델링 혹은 프라모델과 같은 단어에서 쓰인 모델과 일맥 상통하는 개념
-> 즉, 실세계의 어떤 대상을 다른 매체로 옮겨서 표현하는 작업을 뜻함

// 프로그래밍에서의 모델링
-> 실세계의 특정 도메인
-> 예를들어 백화점 엄무와 관련된 개념 (고객,상품 등) 이나
   동작(구매,정산)을 코드라는 매체로 옮겨 표현하는 과정
-> 객체의 단위로 처리하는 경우 객체지향 모델링 이라고 표현한다.

// 도메인에 대한 분석
-> 표현하려는 대상이 무엇인가?
-> 대상은 어떻게 구성되어있는가?

// 도메인의 핵심개념과 요구조건 파악
-> 예를들어 포커게임을 모델링화
-> 카드, 플레이어, 핸드 등과 같은 핵심 개념과
   카드섞기, 베팅하기, 등과같은 동작을 추출할 수 있다.
-> 카드 클래스 { 카드섞기() }  와 같이 모델링
-> 좋은 모델은 주석을 보지 않고도 모델이 나타내는 실세계의 개념에 비추어
   자연스럽게 읽히는 형태이다.
   -> cardDeck 클래스 {카드리스트<카드> , 카드섞기() }
      -> 주석이 없어도 어떻게 하면 카드덱을 섞을 수 있는지 직관적으로 알 수 있다.

// 일반화 , 추상화에 대한 고민
-> 최소한의 수정으로 같은 코드가 두 가지 경우에 모두 적용되게 할 수 있을지 고민하는 것
-> 예를들어 위의 카드게임 을 블랙잭 게임에서 같은 코드를 사용하게 되었을때
   최소한의 수정으로 같은 코드가 두가지 경우에 모두 적용되게 할수있을지 고민하는 과정
-> 객체지향이라는 패러다임 자체가 코드를 일반화하고 추상화하는 한 가지 접근방법이다.
-> 실세계의 개념을 모델링하는 과정에서 지나치게 복잡한 부분을 추상화하여 감추고
-> 서로 다른 개념의 공통점을 찾아 일반화 해서 같은 코드로 동작하게 하는 것

언어에 대한 기초 공부가 끝나고 how 어떻게 사용하는지에 대한 과정이 끝났다면
이제는 why 왜 사용해야 하는지에 대한 연구가 필요할 때이다.
if else 문을 나열하는 대신
상속을 통해 일반화/추상화 하는 방법을 시도해본다면
why 에 대한 답을 스스로 터득할 수 있을 것이다.

*디자인 패턴은 추상화, 일반화의 모범답안 같은것을 모아놓은 것이다.
자주 반복되는 문제에 대한 검증된 모델링 기범의 모임이
객체지향 디자인 패턴의 정의이다.


